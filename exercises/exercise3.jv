pipeline GoodsPipeline
{

    GoodsExtractor
        -> GoodsTextFileInterpreter
        -> GoodsCSVInterpreter 
        -> GoodsRowDeleter
        -> GoodsSelector
        -> TransportedGoodsHeaderWriter
        -> QuantityNameHeaderWriter
        -> GoodsTableInterpreter
        -> ConvertUppercaseMonth
        -> ConvertUppercaseFebruar
        -> GoodsLoader;

    block GoodsExtractor oftype HttpExtractor    
    {

        
        url: "https://www-genesis.destatis.de/genesis/downloads/00/tables/46131-0014_00.csv";
    }

    block GoodsTextFileInterpreter oftype TextFileInterpreter { encoding: "latin3";}
    block GoodsCSVInterpreter oftype CSVInterpreter 
    {
        delimiter: ";";
    }
    

    block GoodsRowDeleter oftype RowDeleter
    {
        delete: [row 1, row 2, row 3, row 4, row 5, row 6, row 7, row 41338, row 41339];
    }
   

    block GoodsSelector oftype CellRangeSelector
    {
        select: range A1:AU*;
    }
    
    block TransportedGoodsHeaderWriter oftype CellWriter
    {
        at: range A1:E1;
        write: ["year", "month", "goods_id", "goods_name", "goods_source"];
    }
    block QuantityNameHeaderWriter oftype CellWriter
    {
        at: range AT1:AU1;
        write: [ "abroad", "total"];
    }
  
   
    block GoodsTableInterpreter oftype TableInterpreter 
    {
        header: true;
        columns: [
            "year" oftype positiveInteger,
            "month" oftype GermanMonth,
            "goods_id" oftype nst7,
            "goods_name" oftype text,
            "goods_source" oftype text, 
            "abroad" oftype positiveInteger,
            "total" oftype positiveInteger,  
        ];
    }
    
    // Numeric values must be positive integers
    valuetype positiveInteger oftype integer
    {
        constraints: [setPositiveInteger];
    }
    constraint setPositiveInteger on decimal:
        value >= 0;

    // Starts with NST7-
    valuetype nst7 oftype text
    {
        constraints: [setNST7];
    }
    constraint setNST7 oftype RegexConstraint
    {
        regex: /^NST7-[A-Z0-9]{3}$/;
    }
    // Uppercase MONTH
    valuetype GermanMonth oftype text
    {
        constraints: [setGermanMonth];
    }
    constraint setGermanMonth oftype AllowlistConstraint {
        allowlist:['Januar','Februar','MÃ¤rz','April','Mai','Juni','Juli','August','September','Oktober','November','Dezember'];
    }

    transform ConvertUppercase 
    {
        from inputName oftype text;
        to outputName oftype text;

        outputName: inputName replace /Januar/ with 'JANUAR' ;
    }
    block ConvertUppercaseMonth oftype TableTransformer
    {
        inputColumns: ['month'];
        outputColumn: 'month';
        use: ConvertUppercase;
    }
    transform ConvertUppercaseFebruar
    {
        from inputName oftype text;
        to outputName oftype text;
        outputName: inputName replace /Februar/ with 'FEBRUAR';
    }
    block ConvertUppercaseFebruar oftype TableTransformer
    {
        inputColumns: ['month'];
        outputColumn: 'month';
        use: ConvertUppercaseFebruar;
    }

    // ============================================================================
    block GoodsLoader oftype SQLiteLoader {
        table: "goods";
        file: "goodsTransportedByTrain.sqlite";
    }

    

}